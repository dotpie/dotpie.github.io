<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>archive</title>
<link>https://dotpie.dev/</link>
<atom:link href="https://dotpie.dev/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.57</generator>
<lastBuildDate>Wed, 02 Oct 2024 15:00:00 GMT</lastBuildDate>
<item>
  <title>Why Binary and Hexadecimal are Important in Python</title>
  <dc:creator>dotpie </dc:creator>
  <link>https://dotpie.dev/cs/binary.html</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Introduction
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Knowing that computers use binary language, yet as a Python programmer, I haven’t had much chance to work with binary and hexadecimal in usual programming tasks. Binary numbers didn’t feel close to me. Since high-level programming like Python deals with abstract data types. Binary were looked rather theoretical.<br>
However, when I came across a problem required to handle exponential values of 2, I found out practical side of binary and hexadecimal. This article provides a brief review of binary and hexadecimal representation in Python, along with their role in computer architecture and real-world applications.</p>
</div>
</div>
</div>
<p>Despite the fact that binary and hexadecimal systems are fundamental to computer science, many programmers don’t often directly handle these number systems in their day-to-day task. Nevertheless, understanding and utilizing these number system is crucial in various aspects of programming and computer science.</p>
<p>It’s important to note that binary can be used to represent anything in computing, from text and images to video and beyond. As we delve into this topic, we’ll explore how these number systems play a vital role in both low-level and high-level programming.</p>
<p><br></p>
<section id="unit-of-data" class="level1">
<h1>Unit of Data</h1>
<p>Computer only understands binary language, which is a combination of 0s and 1s. It is the reason why binary and hexadecimal are basis of all data representation in computer. Although we are not familiar with these number systems, we are close to the terms of ‘Kilobyte(KB)’, ‘Megabyte(MB)’, ‘Gigabyte(GB)’ and ‘Terabyte(TB)’.</p>
<p>1 TB is equals to 1024 GB, 1 GB is equals to 1024 MB and it works same on others. In general, Kilo means 1000, Mega means 1,000,000, Giga means 1,000,000,000 and Tera means 1,000,000,000,000. those units are increased the power of 1000. However, when it comes to computer, it is not 1000, it is 1024. Why? Because every unit of data is represented in binary number. Considering this, we can easily found the reason why computer system use 1024 ($2^{10}), which is the nearest power of 2 to 1000.</p>
<p>It is hard to understand that every text, image, video and other data are represented in terms of 0s and 1s. But you can easily check it by opening any file in binary mode. Let’s see how it works.</p>
<p><br></p>
<section id="binary-representation-with-open-function" class="level2">
<h2 data-anchor-id="binary-representation-with-open-function">Binary Representation with <code>open()</code> Function</h2>
<p>My favicon image is 16x16 pixels and it is a PNG file like below. Let’s read the file in binary mode and see the first 5 bytes of it.</p>
<div id="9ff1f0a0" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Read the favicon image in binary mode</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_file(file_path):</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rb'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open the file in binary mode</span></span>
<span id="cb1-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb1-7"></span>
<span id="cb1-8">file_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> os.getcwd() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'/favicon-16x16.png'</span></span>
<span id="cb1-9">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> read_file(file_path)</span></code></pre></div>
</div>
<p>The variable <code>data</code> could be shown both in an image and in binary format.</p>
<p>First, you can see the favicon image below. The normal format of the image.</p>
<div id="39e34a91" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the favicon image</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> PIL <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Image</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> IPython.display <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> display</span>
<span id="cb2-4"></span>
<span id="cb2-5">favicon_img <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Image.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(file_path)</span>
<span id="cb2-6">display(favicon_img)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://dotpie.dev/cs/binary_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Whereas, the binary format of the image is as follows:</p>
<div id="444d4836" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Display the first 5 bytes of the file in binary</span></span>
<span id="cb3-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]):</span>
<span id="cb3-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(b), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>0b10001001 0b1010000 0b1001110 0b1000111 0b1101 </code></pre>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
File Object in Python: Text, Buffered Binary, Raw Binary
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Python has three type of main file objects: text file, buffered binary file and raw binary file. <code>open()</code> function is the canonical way to create a file object. It takes two arguments: file path and mode.</p>
<p>Files can be opened in two modes: text mode and binary mode. Text mode is for text data, binary mode is for non-text data like images, audio, etc. Binary mode does not perform any encoding or decoding. It reads and writes data as it is.</p>
<p>To open a file in binary mode, you need to add <code>b</code> to the mode string. For example, <code>rb</code> for reading and <code>wb</code> for writing. With this binary mode, you can get the <code>bytes</code> object instead of <code>str</code> object. A bytes object is a sequence of integers in the range of 0 to 255. This is why the output of the code below is range of 0 to 255, not 0 or 1.</p>
<div id="ae26c60f" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Open a file in binary mode</span></span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> b <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> (data[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>((b), end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">" "</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>137 80 78 71 13 </code></pre>
</div>
</div>
<p>For more information, you can check the official Python documentation:</p>
<ul>
<li><a href="https://docs.python.org/3/library/functions.html#open">https://docs.python.org/3/library/functions.html#open</a></li>
<li><a href="https://docs.python.org/3/glossary.html#term-file-object">https://docs.python.org/3/glossary.html#term-file-object</a></li>
<li><a href="https://docs.python.org/3/library/stdtypes.html#bytes">https://docs.python.org/3/library/stdtypes.html#bytes</a></li>
</ul>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="basis-unit-of-information-bit-and-byte" class="level2">
<h2 data-anchor-id="basis-unit-of-information-bit-and-byte">Basis unit of information: Bit and Byte</h2>
<p>As you can see, my favicon image is represented in binary format. The first 5 bytes of the image are as follows:</p>
<pre><code>0b10001001 0b1010000 0b1001110 0b1000111 0b1101</code></pre>
<p>In case of ‘0b10001001’, ‘0b’ is a prefix to indicate that the number is in binary format. The number itself is 10001001. Each digit in binary number is called a <code>bit</code>, which is the smallest unit of signal in a computer science. Bit is a short form of <code>binary digit</code>.</p>
<p>Bit only can have two values, 0 or 1 (off or on). <img src="https://latex.codecogs.com/png.latex?N"> bits can represent <img src="https://latex.codecogs.com/png.latex?2%5E%7BN%7D"> values. It is too small to indicate any meaningful data. Therefore, it is grouped into a larger unit called <code>byte</code>, which is the basic unit of data.</p>
<p>In the above example, 10001001 is consisted of 8 bits. As you can see, 1 byte can represent <img src="https://latex.codecogs.com/png.latex?2%5E%7B8%7D"> or 256 values. Does byte enough to describe information? Yes, it is. For example, 1 byte is enough to indicate a character in ASCII code. This is why the byte is the basic unit of data in computer science. Since the basic unit of data is byte, every unit of data is ends with ‘byte’. For example, kilobyte, megabyte, gigabyte, terabyte, etc. are all ends with ‘byte’.</p>
<p><br></p>
</section>
<section id="hexadecimal-compact-representation-of-binary-data" class="level2">
<h2 data-anchor-id="hexadecimal-compact-representation-of-binary-data">Hexadecimal: Compact Representation of Binary Data</h2>
<p>What about hexadecimal? Hexadecimal is a numeric system that based on 16. It uses 16 symbols: 0-9 and A-F, the most compact way to compress binary data. For example, only 2 digits are enough to indicate number 255 in hexadecimal, whereas 8 digits are needed in binary, like 0b11111111. Namely, 1 byte can be represented by 2 hexadecimal digits.</p>
<p>Still computer uses binary number, hexadecimal is compromise between programmer and computer. It is easier to read and write than binary, also easily convert to binary. This is why hexadecimal is widely used in computer science, especially in low-level programming: expressing memory addresses, register values, and other byte based data, for instance.</p>
<p><br></p>
</section>
</section>
<section id="practical-use-of-binary-and-hexadecimal-in-python" class="level1">
<h1>Practical Use of Binary and Hexadecimal in Python</h1>
<section id="convert-between-number-systems" class="level2">
<h2 data-anchor-id="convert-between-number-systems">Convert between number systems</h2>
<section id="convert-different-base-numbers-to-decimal" class="level3">
<h3 data-anchor-id="convert-different-base-numbers-to-decimal">Convert different base numbers to decimal</h3>
<p>Python provides built-in functions to convert different base numbers to decimal.</p>
<p>Binary numbers are string of 0s and 1s. To convert binary to decimal, <code>int</code> function can be used with base 2. Normally, <code>int</code> function takes one argument, which is a string of number. However, <code>int</code> function can takes two arguments: number and base. For example, <code>int('1010', 2)</code> converts binary number ‘1010’ to decimal number 10.</p>
<div id="8d92571d" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="41">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert binary to decimal</span></span>
<span id="cb8-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># class int( x: str | bytes | bytearray, /, base: SupportsIndex) -&gt; int</span></span>
<span id="cb8-3"></span>
<span id="cb8-4">binary_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1010'</span></span>
<span id="cb8-5">decimal_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(binary_num, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Binary number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>binary_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is converted to decimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decimal_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Binary number 1010 is converted to decimal number 10</code></pre>
</div>
</div>
<p>Likewise, hexadecimal number can be converted to decimal number. Since hex numbers are described of 0-9 and A-F, its data type is string. To convert hexadecimal to decimal, <code>int</code> function can be used with base 16. For example, <code>int('FF', 16)</code> converts hexadecimal number ‘FF’ to decimal number 255.</p>
<div id="2d6d6d4a" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert hexadecimal to decimal</span></span>
<span id="cb10-2">hex_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'FF'</span></span>
<span id="cb10-3">decimal_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(hex_num, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)</span>
<span id="cb10-4"></span>
<span id="cb10-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Hexadecimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hex_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is converted to decimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decimal_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Hexadecimal number FF is converted to decimal number 255</code></pre>
</div>
</div>
<p><br></p>
</section>
<section id="convert-decimal-to-different-base-numbers" class="level3">
<h3 data-anchor-id="convert-decimal-to-different-base-numbers">Convert decimal to different base numbers</h3>
<p>To convert decimal number to binary or hexadecimal, <code>bin</code> and <code>hex</code> functions can be used. <code>bin</code> function converts decimal number to binary number. <code>hex</code> function converts decimal number to hexadecimal number.</p>
<div id="517bdbc3" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert decimal to binary</span></span>
<span id="cb12-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (function) def bin(number: int | SupportsIndex, / ) -&gt; str</span></span>
<span id="cb12-3"></span>
<span id="cb12-4">decimal_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-5">binary_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(decimal_num)</span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Decimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decimal_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is converted to binary number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>binary_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Decimal number 10 is converted to binary number 0b1010</code></pre>
</div>
</div>
<div id="4b581e30" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert decimal to hexadecimal</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># (function) def hex(number: int | SupportsIndex, / ) -&gt; str</span></span>
<span id="cb14-3"></span>
<span id="cb14-4">decimal_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span></span>
<span id="cb14-5">hex_num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">hex</span>(decimal_num)</span>
<span id="cb14-6"></span>
<span id="cb14-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Decimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>decimal_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is converted to hexadecimal number </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>hex_num<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Decimal number 255 is converted to hexadecimal number 0xff</code></pre>
</div>
</div>
<p><br></p>
</section>
</section>
<section id="bitwise-operations" class="level2">
<h2 data-anchor-id="bitwise-operations">Bitwise Operations</h2>
<p>Bitwise operations are performed on binary numbers. These operators are particularly useful when dealing with binary representations directly. In certain situations, it significantly improves the performance of the code as well.</p>
<p>The main bitwise operators in Python are:</p>
<ol type="1">
<li><code>&amp;</code> (AND): Returns 1 if both bits are 1.</li>
<li><code>|</code> (OR): Returns 1 if either of the bits is 1.</li>
<li><code>^</code> (XOR): Returns 1 if the bits are different.</li>
<li><code>~</code> (NOT): Inverts the bits.</li>
<li><code>&lt;&lt;</code> (Left Shift): Shifts the bits to the left.</li>
<li><code>&gt;&gt;</code> (Right Shift): Shifts the bits to the right.</li>
</ol>
<p><br></p>
<section id="difference-between-bitwise-and-logical-operators" class="level3">
<h3 data-anchor-id="difference-between-bitwise-and-logical-operators">Difference between bitwise and logical operators</h3>
<p>In Python, there are bitwise operators (<code>&amp;</code>, <code>|</code>, <code>~</code>) and their logical counterparts (<code>and</code>, <code>or</code>, <code>not</code>). While the basic concepts are similar, their implementations differ. Both <code>&amp;</code> and <code>and</code> return True when both conditions are True, but <code>&amp;</code> operates on individual bits. Similarly, <code>|</code> and <code>or</code>, as well as <code>~</code> and <code>not</code>, have analogous functions but work at different levels of abstraction. These operators may seem interchangeable, in some situations, yet understanding their differences is crucial.</p>
<div id="cd120683" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="8">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bitwise AND operator</span></span>
<span id="cb16-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Bitwise AND: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb16-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Logical AND: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Bitwise AND: 0
Logical AND: 8</code></pre>
</div>
</div>
<p>Why does the output differ? The <code>&amp;</code> operator works on individual bits, whereas the <code>and</code> operator evaluates compare the entire expression of operands: 5, 8.</p>
<div id="d99e4256" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="9">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Binary representation of 5 and 8</span></span>
<span id="cb18-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Binary of 5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb18-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Binary of 8: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Binary of 5: 0b101
Binary of 8: 0b1000</code></pre>
</div>
</div>
<p>The binary representation of 5 and 8 are <code>0b101</code> and <code>0b1000</code>, respectively. The bitwise AND operation is performed on each bit of the two numbers. There are no common digits/numbers/bits between 5 and 8. Therefore the result is <code>0b0</code>, which is 0 in decimal.</p>
<p>What about the logical AND operation? The <code>and</code> operator evaluates the truth of the entire expression. In this case, both 5 and 8 are considered <code>True</code> in Python. <u>The <code>and</code> operator returns the second operand</u>, which is 8 in this case. Therefore, the output is 8.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Key Differences between Bitwise and Logical Operators
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Here are some key differences between bitwise and logical operators:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 18%">
<col style="width: 40%">
<col style="width: 40%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>Bitwise Operator</th>
<th>Logical Operator</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Usage</td>
<td>Binary operation</td>
<td>Logical operation</td>
</tr>
<tr class="even">
<td>Target</td>
<td>integer value</td>
<td>Boolean in most case</td>
</tr>
<tr class="odd">
<td>Return Value</td>
<td>Bitwise result (integer)</td>
<td>One of the operands</td>
</tr>
<tr class="even">
<td>Precedence</td>
<td>High</td>
<td>Low</td>
</tr>
<tr class="odd">
<td>Evaluation</td>
<td>All operands</td>
<td>Does not evaluate second operand if first operand is False</td>
</tr>
<tr class="even">
<td>Boolean</td>
<td>Treats True as 1, False as 0</td>
<td>Uses boolean class as is</td>
</tr>
<tr class="odd">
<td>in Expression</td>
<td>Perform AND operation bit by bit</td>
<td>Evaluates logical truth of entire expression</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="bitwise-operations-in-python" class="level3">
<h3 data-anchor-id="bitwise-operations-in-python">Bitwise Operations in Python</h3>
<p>Bitwise Operations can be easily understood by the following images:</p>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">AND</th>
<th style="text-align: center;">OR</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://realpython.com/cdn-cgi/image/format=auto/https://files.realpython.com/media/and.ef7704d02d6f.gif" alt="Bitwise And" style="height:20vh; width:40vh; max-width:100%; "></td>
<td style="text-align: center;"><img src="https://realpython.com/cdn-cgi/image/format=auto/https://files.realpython.com/media/or.7f09664e2d15.gif" alt="Bitwise Or" style="height:20vh; width:40vh; max-width:100%; "></td>
</tr>
</tbody>
</table>
<table class="caption-top table">
<colgroup>
<col style="width: 50%">
<col style="width: 50%">
</colgroup>
<thead>
<tr class="header">
<th style="text-align: center;">XOR</th>
<th style="text-align: center;">NOT</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: center;"><img src="https://realpython.com/cdn-cgi/image/format=auto/https://files.realpython.com/media/xor.8c17776dd501.gif" alt="Bitwise Xor" style="height:20vh; width:40vh; max-width:100%; "></td>
<td style="text-align: center;"><img src="https://realpython.com/cdn-cgi/image/format=auto/https://files.realpython.com/media/not.7edac5691829.gif" alt="Bitwise Not" style="height:20vh; width:40vh; max-width:100%; "></td>
</tr>
</tbody>
</table>
<ul>
<li>GIF: <a href="https://realpython.com/python-bitwise-operators/">RealPython.com - Bitwise Operators in Python</a></li>
</ul>
<p><br></p>
<section id="shift-operators" class="level4">
<h4 data-anchor-id="shift-operators">Shift Operators</h4>
<p>Operators above are compare the bits of two numbers. However, <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators works tricky. <code>&lt;&lt;</code> and <code>&gt;&gt;</code> operators called <code>left shift</code> and <code>right shift</code> operators. They shift the bits of a number to the left or right.</p>
<p>In terms of shift operators, it is important to note what shifting means in binary numbers. Shifting to the left means multiplying the number by 2, likewise shifting to the right means dividing the number by 2. Remind that every digit in binary number is power of 2.</p>
<p>Left shift operator shifts the bits to the left, and fills the empty bits with 0. Let’s see how it works in Python.</p>
<div id="8198df88" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bitwise Left Shift</span></span>
<span id="cb20-2">number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb20-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The binary of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(number)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>The binary of 5 is 0b101</code></pre>
</div>
</div>
<p>Decimal number 5 is represented in binary as 101(2). When shifted to the left by 1, the result is 1010(1), which is same as <img src="https://latex.codecogs.com/png.latex?5%20*%202%5E%7B1%7D">.</p>
<div id="6dba7bfa" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">shifted <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left Shifted by 1: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb22-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left shifted by 1 is equal to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> * 2 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Left Shifted by 1: 10 (0b1010)
Left shifted by 1 is equal to 5 * 2 = 10</code></pre>
</div>
</div>
<p>Likewise, when shifted to the left by 2, the result is 10100(4), which is same as <img src="https://latex.codecogs.com/png.latex?5%20*%202%5E%7B2%7D">.</p>
<div id="259eddd6" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">shifted_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left Shifted by 2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb24-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left shifted by 2 is equal to </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> * 4 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Left Shifted by 2: 20 (0b10100)
Left shifted by 2 is equal to 5 * 4 = 20</code></pre>
</div>
</div>
<p>How about shifting to the left by 7? The result is 1010000000(128), which is same as <img src="https://latex.codecogs.com/png.latex?5%20*%202%5E%7B7%7D">. Only adding 7 zeros to the right is the same as multiplying by 128.</p>
<div id="8d3dba2a" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">shifted_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> number <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left Shifted by 7: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_7<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Left Shifted by 7: 640 (0b1010000000)</code></pre>
</div>
</div>
<p>There is right shift operator either. Right shift operator shifts the bit to the right, which is equivalent to dividing the number by 2. Let’s bring back <code>shifted_7</code> to the original number.</p>
<div id="7a9da81a" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"The Original number is </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>number<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(number)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span>
<span id="cb28-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Left Shifted by 7 was </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_7<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>The Original number is 5 (0b101)
Left Shifted by 7 was 640 (0b1010000000)</code></pre>
</div>
</div>
<div id="c12201ff" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="15">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Bitwise Right Shift</span></span>
<span id="cb30-2">shifted_back <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shifted_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb30-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shifted by 1: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_back<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_back)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Right Shifted by 1: 320 (0b101000000)</code></pre>
</div>
</div>
<div id="75e1f2a9" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="16">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">shifted_back_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shifted_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb32-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shifted by 2: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_back_2<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_back_2)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Right Shifted by 2: 160 (0b10100000)</code></pre>
</div>
</div>
<div id="18453ca5" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="17">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb34-2">shifted_back_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> shifted_7 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span></span>
<span id="cb34-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shifted by 7: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>shifted_back_7<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> (</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bin</span>(shifted_back_7)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Right Shifted by 7: 5 (0b101)</code></pre>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shifted Operators to Mathematical Operations
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p><img src="https://latex.codecogs.com/png.latex?a%20%3C%3C%20n%20=%20a%20%5Ctimes%202%5E%7Bn%7D"> <img src="https://latex.codecogs.com/png.latex?a%20%3E%3E%20n%20=%20a%20%5Cdiv%202%5E%7Bn%7D"></p>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="true" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Why does the shift operator needed?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse show">
<div class="callout-body-container callout-body">
<p>Bitwise shift operators are useful in optimization. Computers can not multiply or divide numbers directly. They can only add and subtract. Therefore, multiplying or dividing large numbers takes a large amout of computation. However, shifting bits is much faster than multiplying or dividing. This is why shift operators are used in low-level programming.</p>
<p>This is theoretical explanation, but in real-world, compilers and interpreters are smart enough to optimize the code. Python is a high-level language, which means readability is more important than slight performance improvement. Therefore, using shift operators as a means of premature optimization is not recommended.</p>
<ul>
<li><a href="https://realpython.com/python-bitwise-operators/">https://realpython.com/python-bitwise-operators/</a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-6-contents" aria-controls="callout-6" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Right Shift Operator: What if the number is negative?
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-6" class="callout-6-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Normally, dividing operation works same in positive and negative numbers. However, right shift operator works differently in negative numbers because of the way negative numbers are represented in binary.</p>
<p>Computer uses <em>two’s complement</em><sup>1</sup> to represent negative numbers. In two’s complement, the most significant bit (MSB) is used as a sign bit. If the sign bit is 1, the number is negative. When right shifting a negative number, the sign bit is copied to the empty bits. This is called <em>sign extension</em><sup>2</sup>.</p>
<div id="5dc1e9d5" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="18">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right Shift Operator with negative number</span></span>
<span id="cb36-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> show_bits(num, bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>):</span>
<span id="cb36-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb36-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Show the integer number in binary format</span></span>
<span id="cb36-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb36-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:</span>
<span id="cb36-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Represent negative number as a two's complement</span></span>
<span id="cb36-8">        num <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&lt;</span> bits) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> num</span>
<span id="cb36-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span>(num, <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'0</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>bits<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">b'</span>)</span></code></pre></div>
</div>
<p>The function above is implementation of showing the binary bits of a number. If the number is negative, it convert the number to two’s complement. First, extend the bits to determined length of bits, which is 8 in this case. Then, add the number to <img src="https://latex.codecogs.com/png.latex?2%5E%7Bbits=8%7D">. As added number is negative, it is same as subtracting the number from <img src="https://latex.codecogs.com/png.latex?2%5E%7Bbits=8%7D">. This is how two’s complement works, that is flipping the bit values.</p>
<p>Now, every number will be shown in positive number with 8 bits. In this callout, there are 2 examples of right shift operator with negative numbers.</p>
<ol type="1">
<li>The result of right shift is rounded down to the negative direction.</li>
</ol>
<div id="0357e1d0" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="19">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right shift of negative number</span></span>
<span id="cb37-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shift of -5: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> &gt;&gt; 1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb37-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shift of -6: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> &gt;&gt; 1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Right Shift of -5: 11111011 &gt;&gt; 1 = 11111101
Right Shift of -6: 11111010 &gt;&gt; 1 = 11111101</code></pre>
</div>
</div>
<p>The right shift of -5 and -6 by 1 is both -3. In fact, -5 divided by 2 should be -2.5. However, computers can only represent integers. This is why -5 &gt;&gt; 1 is -3.</p>
<ol start="2" type="1">
<li>The sign bit is copied to the empty bits.</li>
</ol>
<div id="37841670" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="20">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Right shift of -1</span></span>
<span id="cb39-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Right Shift of -1: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> &gt;&gt; 1 = </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>show_bits(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Right Shift of -1: 11111111 &gt;&gt; 1 = 11111111</code></pre>
</div>
</div>
<p>After shifting the negative number to the right, left side is filled with 1. This is because the sign bit is copied to the empty bits. Likewise, the right shift of -1 remains -1 because every bit is filled with 1.</p>
</div>
</div>
</div>
<p><br></p>


<aside id="footnotes" class="footnotes footnotes-end-of-section">
<hr>
<ol>
<li id="fn1"><p><a href="https://en.wikipedia.org/wiki/Two%27s_complement">Two’s Complement - Wikipedia</a>↩︎</p></li>
<li id="fn2"><p><a href="https://en.wikipedia.org/wiki/Sign_extension">Sign Extension - Wikipedia</a>↩︎</p></li>
</ol>
</aside>
</section>
</section>
</section>
</section>

 ]]></description>
  <category>computer science</category>
  <category>python</category>
  <guid>https://dotpie.dev/cs/binary.html</guid>
  <pubDate>Wed, 02 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Factorial in Python</title>
  <dc:creator>dotpie </dc:creator>
  <link>https://dotpie.dev/algorithm/factorial.html</link>
  <description><![CDATA[ 





<section id="factorial-in-python" class="level2">
<h2 data-anchor-id="factorial-in-python">Factorial in Python</h2>
<p><a href="https://en.wikipedia.org/wiki/Factorial">Factorial is the product of all positive integers less than or equal to.</a>. For example, factorial of 5 is calculated by the equation below:</p>
<p><img src="https://latex.codecogs.com/png.latex?5!%20=%205%20*%204%20*%203%20*%202%20*%201%20=%20120"></p>
<p>In Python, there is the easiest way to compute factorial. The built-in-function <code>math</code> provide a direct factorial number.</p>
<div id="02ba22a2" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The factorial of 5 is: "</span>, math.factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>The factorial of 5 is:  120</code></pre>
</div>
</div>
<p>To implement the factorial, there are several way.</p>
<section id="for-loop" class="level3">
<h3 data-anchor-id="for-loop">For Loop</h3>
<p>Due to its definition, the naivest way to compute it is using <code>for loop</code>. Set the first value as 1, and multiply number 1 to N.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Time Complexity
</div>
</div>
<div class="callout-body-container callout-body">
<p>With for loop, the factorial will be computed after <img src="https://latex.codecogs.com/png.latex?N"> times of multiplications. Therefore its time complexity is <img src="https://latex.codecogs.com/png.latex?O(N)">.</p>
</div>
</div>
<div id="e5370da3" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="7">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> factorial(n):</span>
<span id="cb3-2">    fac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb3-4">        fac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> i</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fac</span>
<span id="cb3-6"></span>
<span id="cb3-7">factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>120</code></pre>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
source code of math.factorial
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode c code-with-copy"><code class="sourceCode c"><span id="cb5-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">static</span> PyObject <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb5-2">math_factorial<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PyObject <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>module<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> PyObject <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>arg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/*[clinic end generated code: output=6686f26fae00e9ca input=713fb771677e8c31]*/</span></span>
<span id="cb5-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> two_valuation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-6">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">int</span> overflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-7">    PyObject <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>odd_part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-8"></span>
<span id="cb5-9">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyLong_AsLongAndOverflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>arg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span>overflow<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;&amp;</span> PyErr_Occurred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">())</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-12">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>overflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-14">        PyErr_Format<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PyExc_OverflowError<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-15">                     <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factorial() argument should not exceed </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%ld</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-16">                     LONG_MAX<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-18">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>overflow <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">||</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb5-20">        PyErr_SetString<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>PyExc_ValueError<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb5-21">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"factorial() not defined for negative values"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-22">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-23">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb5-24"></span>
<span id="cb5-25">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* use lookup table if x is small */</span></span>
<span id="cb5-26">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">long</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span>Py_ARRAY_LENGTH<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SmallFactorials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">))</span></span>
<span id="cb5-27">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> PyLong_FromUnsignedLong<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>SmallFactorials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]);</span></span>
<span id="cb5-28"></span>
<span id="cb5-29">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* else express in the form odd_part * 2**two_valuation, and compute as</span></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       odd_part &lt;&lt; two_valuation. */</span></span>
<span id="cb5-31">    odd_part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factorial_odd_part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>odd_part <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb5-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> NULL<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-34">    two_valuation <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> count_set_bits<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-35">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _PyLong_Lshift<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>odd_part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> two_valuation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-36">    Py_DECREF<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">(</span>odd_part<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">);</span></span>
<span id="cb5-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb5-38"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</div>
</div>
</div>
<p><br></p>
</section>
<section id="recursive" class="level3">
<h3 data-anchor-id="recursive">Recursive</h3>
<p>If loop can be a solution, recursive can be the solution either. Recursive function is a function that calls itself, like a fractal. By calling itself, the function can be computed by smaller value of the function. Therefore, ‘base case’ is required, which is the smallest value of the function. In case of factorial, factorial should be positive value. Therefore the smallest value of factorial is 1, so does base case. If the function reaches 1, the function will return 1, and the function will be computed by the previous value of the function.</p>
<p>Factorial can be rewritten by smaller factorial, such as:</p>
<p><img src="https://latex.codecogs.com/png.latex?5!%20=%205%20*%204%20*%20(4%20-1)%20*%20((4%20-1)%20-1)%20*%20(((4%20-1)%20-1)%20-1)%20=%205%20*%204!"></p>
<p>In this case, <img src="https://latex.codecogs.com/png.latex?5!"> can be replaced with <img src="https://latex.codecogs.com/png.latex?5%20*%204!">. Similarly, <img src="https://latex.codecogs.com/png.latex?4!"> can be replaced with <img src="https://latex.codecogs.com/png.latex?4%20*%203!">, and so on until the base case, 1. Therefore, <img src="https://latex.codecogs.com/png.latex?5!"> is the same as <img src="https://latex.codecogs.com/png.latex?5%20*%204%20*%203*%202%20*%201!">.</p>
<p>To implement recursive function, define the function that calls itself with the smaller value of the function. like below:</p>
<div id="837d05fd" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="2">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> factorial(n):</span>
<span id="cb6-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>The function will return <img src="https://latex.codecogs.com/png.latex?n%20*%20(n%20-%201)!">, and <img src="https://latex.codecogs.com/png.latex?(n%20-%201)!"> will return <img src="https://latex.codecogs.com/png.latex?n%20-%201%20*%20(n%20-%202)!">, and so on. Yet if there is no base case, the function will be computed infinitely. Therefore, the base case have to be defined to stop the function.</p>
<p>This can be implemented by recursive function.</p>
<div id="00784bda" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="3">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> factorial(n):</span>
<span id="cb7-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># the last value of the function</span></span>
<span id="cb7-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb7-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb7-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb7-6"></span>
<span id="cb7-7">factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>120</code></pre>
</div>
</div>
<p>The equation above follows the direction below:</p>
<div id="c0d07cd4" class="cell" data-incorrectly_encoded_metadata="{.python}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put n as an input of the function</span></span>
<span id="cb9-2">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb9-3">factorial_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since n is not 1, the factorial function will return n * (n - 1)!</span></span>
<span id="cb9-6">factorial_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># put n as 4, and repeat the function</span></span>
<span id="cb9-9">factorial_4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb9-10">factorial_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb9-11">factorial_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># since n is 1, the function will return 1</span></span>
<span id="cb9-14">factorial_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb9-15">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-16"></span>
<span id="cb9-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># compute the whole function</span></span>
<span id="cb9-18">factorial_5 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial_4</span>
<span id="cb9-19">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial_3</span>
<span id="cb9-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial_2</span>
<span id="cb9-21">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial_1</span>
<span id="cb9-22">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb9-23">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">120</span></span></code></pre></div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Recursive Function in One Line
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<p>Furthermore, this recursive function can be written in one line.</p>
<div id="5b7cfa13" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="5">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">factorial <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> n: n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> factorial(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-2">factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>120</code></pre>
</div>
</div>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Time Complexity
</div>
</div>
<div class="callout-body-container callout-body">
<p>The factorial function computes 1 time of multiplication for each call of the function. To compute the whole factorial, the function will be called <img src="https://latex.codecogs.com/png.latex?N"> times. Therefore, the time complexity of the recursive function is <img src="https://latex.codecogs.com/png.latex?O(N)">.</p>
</div>
</div>
<p><br></p>
</section>
<section id="reduce-function" class="level3">
<h3 data-anchor-id="reduce-function">Reduce Function</h3>
<blockquote class="blockquote">
<p><code>reduce</code> reduces ‘iterable’ to a single value by applying the function passed as an argument.</p>
</blockquote>
<div id="eddef906" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="6">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce(function, iterable[, initial]) -&gt; value</span></span>
<span id="cb12-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>120</code></pre>
</div>
</div>
<p>Python provides a built-in function <code>reduce</code> in <code>functools</code> module. It is a function that applies a function of the two arguments cumulatively to the items of an iterable.</p>
<p>In case of the example above, the lambda function <code>lambda x, y: x * y</code> takes two arguments <code>x</code>, <code>y</code> and multiply them. The function <code>reduce</code> applies the lambda function to the range of 1 to 6. Since the initial value is 1, this lambda function will multiply 1 to 1, 2, 3, 4, 5 and return 120.</p>
<div id="7a4fcc57" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="10">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># x will take 1 and computed result of the lambda function</span></span>
<span id="cb14-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># y will take value from 1 to 5, which came from the range</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x = 1, y = 1 -&gt; 1</span></span>
<span id="cb14-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x = 1, y = 2 -&gt; 2</span></span>
<span id="cb14-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x = 2, y = 3 -&gt; 6</span></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x = 6, y = 4 -&gt; 24</span></span>
<span id="cb14-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">x = 24, y = 5 -&gt; 120</span></span>
<span id="cb14-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb14-11"></span>
<span id="cb14-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb14-16"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1
2
6
24
120</code></pre>
</div>
</div>
<div class="callout callout-style-simple callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-5-contents" aria-controls="callout-5" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Fold and Reduce
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-5" class="callout-5-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://upload.wikimedia.org/wikipedia/commons/3/3e/Right-fold-transformation.png" class="img-fluid figure-img"></p>
<figcaption>reduce</figcaption>
</figure>
</div>
<p><code>reduce</code> also termed as ‘fold’ or ‘accumulate’, ‘compress’ in functional programming. Fold recursively breaks that structure down, replacing it with the results of applying a combining function at each node on its terminal values and the recursive results. (<a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">wikipedia</a></p>
<ul>
<li><a href="https://realpython.com/python-reduce-function/">Python’s reduce(): From Functional to Pythonic Style | Real Python</a></li>
</ul>
</div>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Time Complexity
</div>
</div>
<div class="callout-body-container callout-body">
<p>The reduce function applies the function to the iterable. Therefore, if the time complexity of the function is <img src="https://latex.codecogs.com/png.latex?O(N)"> and the number of elements in the iterable is <img src="https://latex.codecogs.com/png.latex?N">, the time complexity of the reduce function is <img src="https://latex.codecogs.com/png.latex?O(N)">.</p>
</div>
</div>
<p><br></p>
</section>
<section id="time-comparison-of-each-method" class="level3">
<h3 data-anchor-id="time-comparison-of-each-method">Time Comparison of each method</h3>
<div id="8d746864" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># math.factorial</span></span>
<span id="cb16-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> math</span>
<span id="cb16-3"></span>
<span id="cb16-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit math.factorial(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>17.2 ns ± 0.101 ns per loop (mean ± std. dev. of 7 runs, 100,000,000 loops each)</code></pre>
</div>
</div>
<div id="15eaff58" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="12">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for loop</span></span>
<span id="cb18-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fac_for(n):</span>
<span id="cb18-3">    fac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb18-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb18-5">        fac <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> i</span>
<span id="cb18-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> fac</span>
<span id="cb18-7"></span>
<span id="cb18-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit fac_for(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>155 ns ± 14.2 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)</code></pre>
</div>
</div>
<div id="294cba89" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># recursive</span></span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fac_recursive(n):</span>
<span id="cb20-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> fac_recursive(n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit fac_recursive(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>176 ns ± 4.13 ns per loop (mean ± std. dev. of 7 runs, 10,000,000 loops each)</code></pre>
</div>
</div>
<div id="9344ee95" class="cell" data-incorrectly_encoded_metadata="{.python}" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># reduce</span></span>
<span id="cb22-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb22-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fac_reduce(n):</span>
<span id="cb22-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x, y: x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> y, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-5"></span>
<span id="cb22-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit fac_reduce(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>315 ns ± 6.19 ns per loop (mean ± std. dev. of 7 runs, 1,000,000 loops each)</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>algorithms</category>
  <guid>https://dotpie.dev/algorithm/factorial.html</guid>
  <pubDate>Tue, 01 Oct 2024 15:00:00 GMT</pubDate>
</item>
<item>
  <title>Being Part of Other’s Growth</title>
  <dc:creator>dotpie </dc:creator>
  <link>https://dotpie.dev/being-part-of-others-growth.html</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note" data-collapser="false">
<div class="callout-body d-flex">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-body-container">
<p>This is a personal reflection on how I can contribute to other’s growth.<br> It is based on my personal experiences so that it could be biased.</p>
</div>
</div>
</div>
<section id="a-knowledge-sharing-chain" class="level2">
<h2 data-anchor-id="a-knowledge-sharing-chain">A knowledge-sharing-chain</h2>
<p>What is the best way to pass on knowledge and experience to others? As a tutor, mentor, or a colleague, it was a question that I often asked myself. Most of time, I was in a position to help others grow, especially in coding and development. At the time, what I could do was to share my experiences and difficulties with others, because I was also on the middle of learning step.</p>
<p>Sharing was enough when I was in student circle. In circle, we were all learned together, same time, same topic. The difficulties I encountered was highly repeated to others. What I tried was stacking my own difficulties and solutions, then share it when other faced the similar issue. This kind of ‘sharing chain’ was fully effective to boost our learning speed. We were a student and a teacher at the same time. Through this process, I learned to pick up the problems that other could face, and how to share the solution in a way that they could understand.</p>
</section>
<section id="the-requirements-for-sharing-knowledge" class="level2">
<h2 data-anchor-id="the-requirements-for-sharing-knowledge">The requirements for sharing knowledge</h2>
<p>To make other understand the solution, tutor have to is understanding the fundamental background of the whole situation. Tutor have to decide where to focus on, then connect the key points to make a clear path.</p>
<p>Yet, I was a kind of person who explore the whole picture of the problem, point out the key points is kind of complicated task. There were too many things to explain and every detail looked important. To overcome this, I made a strategy by breaking down the problem into small pieces, then pick up the key points of small pieces. After done this, I could make a clear path to the solution.</p>
<p>Surely there might be someone who would like to know whole picture of the problem, but most of time, too much information makes them confused. Therefore, to give a proper answer, understanding listener’s background is essential. This is not a technical stuff, but a soft skill.</p>
<p>Through my experiences, I listed the principle to share the knowledge effectively.</p>
<ol type="1">
<li><strong>Understand the listener’s background</strong>: To decide the depth of the explanation, checking the background is essential. The language of explanation should be familiar to the listener.</li>
<li><strong>Find out how much motivated the listener is</strong>: The motivation of the lister means how much they want to know the solution. Tutoring and Teaching should not be done in a one-off session, since every knowledge has its own depth. If the listenr wants to know only the solution, then just give the solution. Learning shouldn’t be a burden. Theory and background can be explained later.</li>
<li><strong>Associate the problem with the listener’s goal</strong>: People tends to focus when the problem is related to their own’s. As mentioned above, the listener’s motivation is important. If the listener has a goal, then associate the problem with the goal. This will make the listener feels that the issue familiar to them. Make them feel that they are not learning, but solving their own problem.</li>
</ol>
<p>These are aimed to make the learner acquire the way to solve the problem. The goal of tutoring is not to give the solution, but to make the listener understand the way to solve the problem.</p>
</section>
<section id="proactive-contribution" class="level2">
<h2 data-anchor-id="proactive-contribution">Proactive contribution</h2>
<p>The most important thing in sharing knowledge is to be proactive. During the tutoring process, the tutee are going to learn how to find problems and how to ask properly, such as what to ask, what looked important, and what could be suspicious. After the steps, the tutee will be able to discuss the problem with others, and find the solution by themselves. A kind of knowledge-sharing-chain will be formed.</p>
<p>Tutor should not be a person who gives the solution, but the person who thinks together with the tutee. To do this, tutor have to be proactive, which means tutor have their own motivation to learn and think. This is the most important thing to be a being part of other’s growth.</p>
</section>
<section id="conclusion" class="level2">
<h2 data-anchor-id="conclusion">Conclusion</h2>
<p>I am still learning how to learn as tutee and tutor. It will be continued during my developer life, and I hope that I could be a developer who have solid foundation of knowledge and experience.</p>


</section>

 ]]></description>
  <category>soft-skills</category>
  <category>self-review</category>
  <guid>https://dotpie.dev/being-part-of-others-growth.html</guid>
  <pubDate>Sat, 28 Sep 2024 15:00:00 GMT</pubDate>
</item>
</channel>
</rss>
